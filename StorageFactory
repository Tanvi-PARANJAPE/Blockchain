//SPDX-License-Identifier:MIT


pragma solidity ^0.8.30;


contract SimpleStorage {
// this will get initialized to 0!
uint256 favoriteNumber;
bool favoriteBool;

struct People {
uint256 favoriteNumber;
string name;
}

People[] public people;
mapping(string => uint256) public nameToFavoriteNumber;

People public person = People({favoriteNumber:2,name:"Patrick"});

function store(uint256 _favoriteNumber) public {
favoriteNumber = _favoriteNumber;
}

// view, pure - don't have to make a transaction on thse two functions
function retrieve() public view returns(uint256) {
return favoriteNumber;
}

function addPerson(string memory _name, uint256 _favoriteNumber) public {
people.push(People(_favoriteNumber, _name));
nameToFavoriteNumber[_name] = _favoriteNumber;
}
}


contract StorageFactory{
    SimpleStorage[] public simpleStorageArray;
    function createSimpleStoragecontract() public {
        SimpleStorage simpleStorage= new SimpleStorage();
        simpleStorageArray.push(simpleStorage);
    }
}
